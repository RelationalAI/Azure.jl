# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct LegalHold <: SwaggerModel
    hasLegalHold::Any # spec type: Union{ Nothing, Bool } # spec name: hasLegalHold
    tags::Any # spec type: Union{ Nothing, Vector{String} } # spec name: tags

    function LegalHold(;hasLegalHold=nothing, tags=nothing)
        o = new()
        validate_property(LegalHold, Symbol("hasLegalHold"), hasLegalHold)
        setfield!(o, Symbol("hasLegalHold"), hasLegalHold)
        validate_property(LegalHold, Symbol("tags"), tags)
        setfield!(o, Symbol("tags"), tags)
        o
    end
end # type LegalHold

const _property_map_LegalHold = Dict{Symbol,Symbol}(Symbol("hasLegalHold")=>Symbol("hasLegalHold"), Symbol("tags")=>Symbol("tags"))
const _property_types_LegalHold = Dict{Symbol,String}(Symbol("hasLegalHold")=>"Bool", Symbol("tags")=>"Vector{String}")
Base.propertynames(::Type{ LegalHold }) = collect(keys(_property_map_LegalHold))
Swagger.property_type(::Type{ LegalHold }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_LegalHold[name]))}
Swagger.field_name(::Type{ LegalHold }, property_name::Symbol) =  _property_map_LegalHold[property_name]

function check_required(o::LegalHold)
    (getproperty(o, Symbol("tags")) === nothing) && (return false)
    true
end

function validate_property(::Type{ LegalHold }, name::Symbol, val)
end
