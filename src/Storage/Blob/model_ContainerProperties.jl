# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct ContainerProperties <: SwaggerModel
    defaultEncryptionScope::Any # spec type: Union{ Nothing, String } # spec name: defaultEncryptionScope
    denyEncryptionScopeOverride::Any # spec type: Union{ Nothing, Bool } # spec name: denyEncryptionScopeOverride
    publicAccess::Any # spec type: Union{ Nothing, String } # spec name: publicAccess
    lastModifiedTime::Any # spec type: Union{ Nothing, DateTime } # spec name: lastModifiedTime
    leaseStatus::Any # spec type: Union{ Nothing, String } # spec name: leaseStatus
    leaseState::Any # spec type: Union{ Nothing, String } # spec name: leaseState
    leaseDuration::Any # spec type: Union{ Nothing, String } # spec name: leaseDuration
    metadata::Any # spec type: Union{ Nothing, Dict{String, String} } # spec name: metadata
    immutabilityPolicy::Any # spec type: Union{ Nothing, ImmutabilityPolicyProperties } # spec name: immutabilityPolicy
    legalHold::Any # spec type: Union{ Nothing, LegalHoldProperties } # spec name: legalHold
    hasLegalHold::Any # spec type: Union{ Nothing, Bool } # spec name: hasLegalHold
    hasImmutabilityPolicy::Any # spec type: Union{ Nothing, Bool } # spec name: hasImmutabilityPolicy

    function ContainerProperties(;defaultEncryptionScope=nothing, denyEncryptionScopeOverride=nothing, publicAccess=nothing, lastModifiedTime=nothing, leaseStatus=nothing, leaseState=nothing, leaseDuration=nothing, metadata=nothing, immutabilityPolicy=nothing, legalHold=nothing, hasLegalHold=nothing, hasImmutabilityPolicy=nothing)
        o = new()
        validate_property(ContainerProperties, Symbol("defaultEncryptionScope"), defaultEncryptionScope)
        setfield!(o, Symbol("defaultEncryptionScope"), defaultEncryptionScope)
        validate_property(ContainerProperties, Symbol("denyEncryptionScopeOverride"), denyEncryptionScopeOverride)
        setfield!(o, Symbol("denyEncryptionScopeOverride"), denyEncryptionScopeOverride)
        validate_property(ContainerProperties, Symbol("publicAccess"), publicAccess)
        setfield!(o, Symbol("publicAccess"), publicAccess)
        validate_property(ContainerProperties, Symbol("lastModifiedTime"), lastModifiedTime)
        setfield!(o, Symbol("lastModifiedTime"), lastModifiedTime)
        validate_property(ContainerProperties, Symbol("leaseStatus"), leaseStatus)
        setfield!(o, Symbol("leaseStatus"), leaseStatus)
        validate_property(ContainerProperties, Symbol("leaseState"), leaseState)
        setfield!(o, Symbol("leaseState"), leaseState)
        validate_property(ContainerProperties, Symbol("leaseDuration"), leaseDuration)
        setfield!(o, Symbol("leaseDuration"), leaseDuration)
        validate_property(ContainerProperties, Symbol("metadata"), metadata)
        setfield!(o, Symbol("metadata"), metadata)
        validate_property(ContainerProperties, Symbol("immutabilityPolicy"), immutabilityPolicy)
        setfield!(o, Symbol("immutabilityPolicy"), immutabilityPolicy)
        validate_property(ContainerProperties, Symbol("legalHold"), legalHold)
        setfield!(o, Symbol("legalHold"), legalHold)
        validate_property(ContainerProperties, Symbol("hasLegalHold"), hasLegalHold)
        setfield!(o, Symbol("hasLegalHold"), hasLegalHold)
        validate_property(ContainerProperties, Symbol("hasImmutabilityPolicy"), hasImmutabilityPolicy)
        setfield!(o, Symbol("hasImmutabilityPolicy"), hasImmutabilityPolicy)
        o
    end
end # type ContainerProperties

const _property_map_ContainerProperties = Dict{Symbol,Symbol}(Symbol("defaultEncryptionScope")=>Symbol("defaultEncryptionScope"), Symbol("denyEncryptionScopeOverride")=>Symbol("denyEncryptionScopeOverride"), Symbol("publicAccess")=>Symbol("publicAccess"), Symbol("lastModifiedTime")=>Symbol("lastModifiedTime"), Symbol("leaseStatus")=>Symbol("leaseStatus"), Symbol("leaseState")=>Symbol("leaseState"), Symbol("leaseDuration")=>Symbol("leaseDuration"), Symbol("metadata")=>Symbol("metadata"), Symbol("immutabilityPolicy")=>Symbol("immutabilityPolicy"), Symbol("legalHold")=>Symbol("legalHold"), Symbol("hasLegalHold")=>Symbol("hasLegalHold"), Symbol("hasImmutabilityPolicy")=>Symbol("hasImmutabilityPolicy"))
const _property_types_ContainerProperties = Dict{Symbol,String}(Symbol("defaultEncryptionScope")=>"String", Symbol("denyEncryptionScopeOverride")=>"Bool", Symbol("publicAccess")=>"String", Symbol("lastModifiedTime")=>"DateTime", Symbol("leaseStatus")=>"String", Symbol("leaseState")=>"String", Symbol("leaseDuration")=>"String", Symbol("metadata")=>"Dict{String, String}", Symbol("immutabilityPolicy")=>"ImmutabilityPolicyProperties", Symbol("legalHold")=>"LegalHoldProperties", Symbol("hasLegalHold")=>"Bool", Symbol("hasImmutabilityPolicy")=>"Bool")
Base.propertynames(::Type{ ContainerProperties }) = collect(keys(_property_map_ContainerProperties))
Swagger.property_type(::Type{ ContainerProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ContainerProperties[name]))}
Swagger.field_name(::Type{ ContainerProperties }, property_name::Symbol) =  _property_map_ContainerProperties[property_name]

const _allowed_ContainerProperties_publicAccess = ["Container", "Blob", "None"]

const _allowed_ContainerProperties_leaseStatus = ["Locked", "Unlocked"]

const _allowed_ContainerProperties_leaseState = ["Available", "Leased", "Expired", "Breaking", "Broken"]

const _allowed_ContainerProperties_leaseDuration = ["Infinite", "Fixed"]

function check_required(o::ContainerProperties)
    true
end

function validate_property(::Type{ ContainerProperties }, name::Symbol, val)
    if name === Symbol("publicAccess")
        Swagger.validate_param(name, "ContainerProperties", :enum, val, _allowed_ContainerProperties_publicAccess)
    end
    if name === Symbol("leaseStatus")
        Swagger.validate_param(name, "ContainerProperties", :enum, val, _allowed_ContainerProperties_leaseStatus)
    end
    if name === Symbol("leaseState")
        Swagger.validate_param(name, "ContainerProperties", :enum, val, _allowed_ContainerProperties_leaseState)
    end
    if name === Symbol("leaseDuration")
        Swagger.validate_param(name, "ContainerProperties", :enum, val, _allowed_ContainerProperties_leaseDuration)
    end
end
