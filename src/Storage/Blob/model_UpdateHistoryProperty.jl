# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct UpdateHistoryProperty <: SwaggerModel
    update::Any # spec type: Union{ Nothing, String } # spec name: update
    immutabilityPeriodSinceCreationInDays::Any # spec type: Union{ Nothing, Int32 } # spec name: immutabilityPeriodSinceCreationInDays
    timestamp::Any # spec type: Union{ Nothing, DateTime } # spec name: timestamp
    objectIdentifier::Any # spec type: Union{ Nothing, String } # spec name: objectIdentifier
    tenantId::Any # spec type: Union{ Nothing, String } # spec name: tenantId
    upn::Any # spec type: Union{ Nothing, String } # spec name: upn

    function UpdateHistoryProperty(;update=nothing, immutabilityPeriodSinceCreationInDays=nothing, timestamp=nothing, objectIdentifier=nothing, tenantId=nothing, upn=nothing)
        o = new()
        validate_property(UpdateHistoryProperty, Symbol("update"), update)
        setfield!(o, Symbol("update"), update)
        validate_property(UpdateHistoryProperty, Symbol("immutabilityPeriodSinceCreationInDays"), immutabilityPeriodSinceCreationInDays)
        setfield!(o, Symbol("immutabilityPeriodSinceCreationInDays"), immutabilityPeriodSinceCreationInDays)
        validate_property(UpdateHistoryProperty, Symbol("timestamp"), timestamp)
        setfield!(o, Symbol("timestamp"), timestamp)
        validate_property(UpdateHistoryProperty, Symbol("objectIdentifier"), objectIdentifier)
        setfield!(o, Symbol("objectIdentifier"), objectIdentifier)
        validate_property(UpdateHistoryProperty, Symbol("tenantId"), tenantId)
        setfield!(o, Symbol("tenantId"), tenantId)
        validate_property(UpdateHistoryProperty, Symbol("upn"), upn)
        setfield!(o, Symbol("upn"), upn)
        o
    end
end # type UpdateHistoryProperty

const _property_map_UpdateHistoryProperty = Dict{Symbol,Symbol}(Symbol("update")=>Symbol("update"), Symbol("immutabilityPeriodSinceCreationInDays")=>Symbol("immutabilityPeriodSinceCreationInDays"), Symbol("timestamp")=>Symbol("timestamp"), Symbol("objectIdentifier")=>Symbol("objectIdentifier"), Symbol("tenantId")=>Symbol("tenantId"), Symbol("upn")=>Symbol("upn"))
const _property_types_UpdateHistoryProperty = Dict{Symbol,String}(Symbol("update")=>"String", Symbol("immutabilityPeriodSinceCreationInDays")=>"Int32", Symbol("timestamp")=>"DateTime", Symbol("objectIdentifier")=>"String", Symbol("tenantId")=>"String", Symbol("upn")=>"String")
Base.propertynames(::Type{ UpdateHistoryProperty }) = collect(keys(_property_map_UpdateHistoryProperty))
Swagger.property_type(::Type{ UpdateHistoryProperty }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UpdateHistoryProperty[name]))}
Swagger.field_name(::Type{ UpdateHistoryProperty }, property_name::Symbol) =  _property_map_UpdateHistoryProperty[property_name]

const _allowed_UpdateHistoryProperty_update = ["put", "lock", "extend"]

function check_required(o::UpdateHistoryProperty)
    true
end

function validate_property(::Type{ UpdateHistoryProperty }, name::Symbol, val)
    if name === Symbol("update")
        Swagger.validate_param(name, "UpdateHistoryProperty", :enum, val, _allowed_UpdateHistoryProperty_update)
    end
end
