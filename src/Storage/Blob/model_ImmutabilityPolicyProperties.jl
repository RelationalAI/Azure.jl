# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct ImmutabilityPolicyProperties <: SwaggerModel
    properties::Any # spec type: Union{ Nothing, ImmutabilityPolicyProperty } # spec name: properties
    etag::Any # spec type: Union{ Nothing, String } # spec name: etag
    updateHistory::Any # spec type: Union{ Nothing, Vector{UpdateHistoryProperty} } # spec name: updateHistory

    function ImmutabilityPolicyProperties(;properties=nothing, etag=nothing, updateHistory=nothing)
        o = new()
        validate_property(ImmutabilityPolicyProperties, Symbol("properties"), properties)
        setfield!(o, Symbol("properties"), properties)
        validate_property(ImmutabilityPolicyProperties, Symbol("etag"), etag)
        setfield!(o, Symbol("etag"), etag)
        validate_property(ImmutabilityPolicyProperties, Symbol("updateHistory"), updateHistory)
        setfield!(o, Symbol("updateHistory"), updateHistory)
        o
    end
end # type ImmutabilityPolicyProperties

const _property_map_ImmutabilityPolicyProperties = Dict{Symbol,Symbol}(Symbol("properties")=>Symbol("properties"), Symbol("etag")=>Symbol("etag"), Symbol("updateHistory")=>Symbol("updateHistory"))
const _property_types_ImmutabilityPolicyProperties = Dict{Symbol,String}(Symbol("properties")=>"ImmutabilityPolicyProperty", Symbol("etag")=>"String", Symbol("updateHistory")=>"Vector{UpdateHistoryProperty}")
Base.propertynames(::Type{ ImmutabilityPolicyProperties }) = collect(keys(_property_map_ImmutabilityPolicyProperties))
Swagger.property_type(::Type{ ImmutabilityPolicyProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ImmutabilityPolicyProperties[name]))}
Swagger.field_name(::Type{ ImmutabilityPolicyProperties }, property_name::Symbol) =  _property_map_ImmutabilityPolicyProperties[property_name]

function check_required(o::ImmutabilityPolicyProperties)
    true
end

function validate_property(::Type{ ImmutabilityPolicyProperties }, name::Symbol, val)
end
