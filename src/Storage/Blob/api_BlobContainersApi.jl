# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

struct BlobContainersApi <: SwaggerApi
    client::Swagger.Client
end

"""

Clears legal hold tags. Clearing the same or non-existent tag results in an idempotent operation. ClearLegalHold clears out only the specified tags in the request.
Param: resourceGroupName::String (required)
Param: accountName::String (required)
Param: containerName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Param: LegalHold::LegalHold (required)
Return: LegalHold
"""
function blobContainersClearLegalHold(_api::BlobContainersApi, resourceGroupName::String, accountName::String, containerName::String, api_version::String, subscriptionId::String, LegalHold; _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "blobContainersClearLegalHold", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "blobContainersClearLegalHold", :minLength, resourceGroupName, 1)

    Swagger.validate_param("accountName", "blobContainersClearLegalHold", :maxLength, accountName, 24)
    Swagger.validate_param("accountName", "blobContainersClearLegalHold", :minLength, accountName, 3)

    Swagger.validate_param("containerName", "blobContainersClearLegalHold", :maxLength, containerName, 63)
    Swagger.validate_param("containerName", "blobContainersClearLegalHold", :minLength, containerName, 3)

    Swagger.validate_param("api_version", "blobContainersClearLegalHold", :minLength, api_version, 1)

    Swagger.validate_param("subscriptionId", "blobContainersClearLegalHold", :minLength, subscriptionId, 1)

    _ctx = Swagger.Ctx(_api.client, "POST", LegalHold, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/clearLegalHold", ["azure_auth"], LegalHold)
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "accountName", accountName)  # type String
    Swagger.set_param(_ctx.path, "containerName", containerName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Creates a new container under the specified account as described by request body. The container resource includes metadata and properties for that container. It does not include a list of the blobs contained by the container. 
Param: resourceGroupName::String (required)
Param: accountName::String (required)
Param: containerName::String (required)
Param: blobContainer::BlobContainer (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: BlobContainer
"""
function blobContainersCreate(_api::BlobContainersApi, resourceGroupName::String, accountName::String, containerName::String, blobContainer, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "blobContainersCreate", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "blobContainersCreate", :minLength, resourceGroupName, 1)

    Swagger.validate_param("accountName", "blobContainersCreate", :maxLength, accountName, 24)
    Swagger.validate_param("accountName", "blobContainersCreate", :minLength, accountName, 3)

    Swagger.validate_param("containerName", "blobContainersCreate", :maxLength, containerName, 63)
    Swagger.validate_param("containerName", "blobContainersCreate", :minLength, containerName, 3)

    Swagger.validate_param("api_version", "blobContainersCreate", :minLength, api_version, 1)

    Swagger.validate_param("subscriptionId", "blobContainersCreate", :minLength, subscriptionId, 1)

    _ctx = Swagger.Ctx(_api.client, "PUT", BlobContainer, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}", ["azure_auth"], blobContainer)
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "accountName", accountName)  # type String
    Swagger.set_param(_ctx.path, "containerName", containerName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not required for this operation.
Param: resourceGroupName::String (required)
Param: accountName::String (required)
Param: containerName::String (required)
Param: immutabilityPolicyName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Param: parameters::ImmutabilityPolicy
Param: If_Match::String
Return: ImmutabilityPolicy
"""
function blobContainersCreateOrUpdateImmutabilityPolicy(_api::BlobContainersApi, resourceGroupName::String, accountName::String, containerName::String, immutabilityPolicyName::String, api_version::String, subscriptionId::String; parameters=nothing, If_Match=nothing, _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "blobContainersCreateOrUpdateImmutabilityPolicy", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "blobContainersCreateOrUpdateImmutabilityPolicy", :minLength, resourceGroupName, 1)

    Swagger.validate_param("accountName", "blobContainersCreateOrUpdateImmutabilityPolicy", :maxLength, accountName, 24)
    Swagger.validate_param("accountName", "blobContainersCreateOrUpdateImmutabilityPolicy", :minLength, accountName, 3)

    Swagger.validate_param("containerName", "blobContainersCreateOrUpdateImmutabilityPolicy", :maxLength, containerName, 63)
    Swagger.validate_param("containerName", "blobContainersCreateOrUpdateImmutabilityPolicy", :minLength, containerName, 3)

    Swagger.validate_param("api_version", "blobContainersCreateOrUpdateImmutabilityPolicy", :minLength, api_version, 1)

    Swagger.validate_param("subscriptionId", "blobContainersCreateOrUpdateImmutabilityPolicy", :minLength, subscriptionId, 1)

    _ctx = Swagger.Ctx(_api.client, "PUT", ImmutabilityPolicy, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}", ["azure_auth"], parameters)
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "accountName", accountName)  # type String
    Swagger.set_param(_ctx.path, "containerName", containerName)  # type String
    Swagger.set_param(_ctx.path, "immutabilityPolicyName", immutabilityPolicyName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_param(_ctx.header, "If-Match", If_Match)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Deletes specified container under its account.
Param: resourceGroupName::String (required)
Param: accountName::String (required)
Param: containerName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: Nothing
"""
function blobContainersDelete(_api::BlobContainersApi, resourceGroupName::String, accountName::String, containerName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "blobContainersDelete", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "blobContainersDelete", :minLength, resourceGroupName, 1)

    Swagger.validate_param("accountName", "blobContainersDelete", :maxLength, accountName, 24)
    Swagger.validate_param("accountName", "blobContainersDelete", :minLength, accountName, 3)

    Swagger.validate_param("containerName", "blobContainersDelete", :maxLength, containerName, 63)
    Swagger.validate_param("containerName", "blobContainersDelete", :minLength, containerName, 3)

    Swagger.validate_param("api_version", "blobContainersDelete", :minLength, api_version, 1)

    Swagger.validate_param("subscriptionId", "blobContainersDelete", :minLength, subscriptionId, 1)

    _ctx = Swagger.Ctx(_api.client, "DELETE", Nothing, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "accountName", accountName)  # type String
    Swagger.set_param(_ctx.path, "containerName", containerName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Aborts an unlocked immutability policy. The response of delete has immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for this operation. Deleting a locked immutability policy is not allowed, only way is to delete the container after deleting all blobs inside the container.
Param: resourceGroupName::String (required)
Param: accountName::String (required)
Param: containerName::String (required)
Param: immutabilityPolicyName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Param: If_Match::String (required)
Return: ImmutabilityPolicy
"""
function blobContainersDeleteImmutabilityPolicy(_api::BlobContainersApi, resourceGroupName::String, accountName::String, containerName::String, immutabilityPolicyName::String, api_version::String, subscriptionId::String, If_Match::String; _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "blobContainersDeleteImmutabilityPolicy", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "blobContainersDeleteImmutabilityPolicy", :minLength, resourceGroupName, 1)

    Swagger.validate_param("accountName", "blobContainersDeleteImmutabilityPolicy", :maxLength, accountName, 24)
    Swagger.validate_param("accountName", "blobContainersDeleteImmutabilityPolicy", :minLength, accountName, 3)

    Swagger.validate_param("containerName", "blobContainersDeleteImmutabilityPolicy", :maxLength, containerName, 63)
    Swagger.validate_param("containerName", "blobContainersDeleteImmutabilityPolicy", :minLength, containerName, 3)

    Swagger.validate_param("api_version", "blobContainersDeleteImmutabilityPolicy", :minLength, api_version, 1)

    Swagger.validate_param("subscriptionId", "blobContainersDeleteImmutabilityPolicy", :minLength, subscriptionId, 1)

    _ctx = Swagger.Ctx(_api.client, "DELETE", ImmutabilityPolicy, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "accountName", accountName)  # type String
    Swagger.set_param(_ctx.path, "containerName", containerName)  # type String
    Swagger.set_param(_ctx.path, "immutabilityPolicyName", immutabilityPolicyName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_param(_ctx.header, "If-Match", If_Match)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. The only action allowed on a Locked policy will be this action. ETag in If-Match is required for this operation.
Param: resourceGroupName::String (required)
Param: accountName::String (required)
Param: containerName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Param: If_Match::String (required)
Param: parameters::ImmutabilityPolicy
Return: ImmutabilityPolicy
"""
function blobContainersExtendImmutabilityPolicy(_api::BlobContainersApi, resourceGroupName::String, accountName::String, containerName::String, api_version::String, subscriptionId::String, If_Match::String; parameters=nothing, _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "blobContainersExtendImmutabilityPolicy", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "blobContainersExtendImmutabilityPolicy", :minLength, resourceGroupName, 1)

    Swagger.validate_param("accountName", "blobContainersExtendImmutabilityPolicy", :maxLength, accountName, 24)
    Swagger.validate_param("accountName", "blobContainersExtendImmutabilityPolicy", :minLength, accountName, 3)

    Swagger.validate_param("containerName", "blobContainersExtendImmutabilityPolicy", :maxLength, containerName, 63)
    Swagger.validate_param("containerName", "blobContainersExtendImmutabilityPolicy", :minLength, containerName, 3)

    Swagger.validate_param("api_version", "blobContainersExtendImmutabilityPolicy", :minLength, api_version, 1)

    Swagger.validate_param("subscriptionId", "blobContainersExtendImmutabilityPolicy", :minLength, subscriptionId, 1)

    _ctx = Swagger.Ctx(_api.client, "POST", ImmutabilityPolicy, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/extend", ["azure_auth"], parameters)
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "accountName", accountName)  # type String
    Swagger.set_param(_ctx.path, "containerName", containerName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_param(_ctx.header, "If-Match", If_Match)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Gets properties of a specified container. 
Param: resourceGroupName::String (required)
Param: accountName::String (required)
Param: containerName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: BlobContainer
"""
function blobContainersGet(_api::BlobContainersApi, resourceGroupName::String, accountName::String, containerName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "blobContainersGet", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "blobContainersGet", :minLength, resourceGroupName, 1)

    Swagger.validate_param("accountName", "blobContainersGet", :maxLength, accountName, 24)
    Swagger.validate_param("accountName", "blobContainersGet", :minLength, accountName, 3)

    Swagger.validate_param("containerName", "blobContainersGet", :maxLength, containerName, 63)
    Swagger.validate_param("containerName", "blobContainersGet", :minLength, containerName, 3)

    Swagger.validate_param("api_version", "blobContainersGet", :minLength, api_version, 1)

    Swagger.validate_param("subscriptionId", "blobContainersGet", :minLength, subscriptionId, 1)

    _ctx = Swagger.Ctx(_api.client, "GET", BlobContainer, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "accountName", accountName)  # type String
    Swagger.set_param(_ctx.path, "containerName", containerName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Gets the existing immutability policy along with the corresponding ETag in response headers and body.
Param: resourceGroupName::String (required)
Param: accountName::String (required)
Param: containerName::String (required)
Param: immutabilityPolicyName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Param: If_Match::String
Return: ImmutabilityPolicy
"""
function blobContainersGetImmutabilityPolicy(_api::BlobContainersApi, resourceGroupName::String, accountName::String, containerName::String, immutabilityPolicyName::String, api_version::String, subscriptionId::String; If_Match=nothing, _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "blobContainersGetImmutabilityPolicy", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "blobContainersGetImmutabilityPolicy", :minLength, resourceGroupName, 1)

    Swagger.validate_param("accountName", "blobContainersGetImmutabilityPolicy", :maxLength, accountName, 24)
    Swagger.validate_param("accountName", "blobContainersGetImmutabilityPolicy", :minLength, accountName, 3)

    Swagger.validate_param("containerName", "blobContainersGetImmutabilityPolicy", :maxLength, containerName, 63)
    Swagger.validate_param("containerName", "blobContainersGetImmutabilityPolicy", :minLength, containerName, 3)

    Swagger.validate_param("api_version", "blobContainersGetImmutabilityPolicy", :minLength, api_version, 1)

    Swagger.validate_param("subscriptionId", "blobContainersGetImmutabilityPolicy", :minLength, subscriptionId, 1)

    _ctx = Swagger.Ctx(_api.client, "GET", ImmutabilityPolicy, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "accountName", accountName)  # type String
    Swagger.set_param(_ctx.path, "containerName", containerName)  # type String
    Swagger.set_param(_ctx.path, "immutabilityPolicyName", immutabilityPolicyName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_param(_ctx.header, "If-Match", If_Match)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

The Lease Container operation establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite.
Param: resourceGroupName::String (required)
Param: accountName::String (required)
Param: containerName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Param: parameters::LeaseContainerRequest
Return: LeaseContainerResponse
"""
function blobContainersLease(_api::BlobContainersApi, resourceGroupName::String, accountName::String, containerName::String, api_version::String, subscriptionId::String; parameters=nothing, _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "blobContainersLease", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "blobContainersLease", :minLength, resourceGroupName, 1)

    Swagger.validate_param("accountName", "blobContainersLease", :maxLength, accountName, 24)
    Swagger.validate_param("accountName", "blobContainersLease", :minLength, accountName, 3)

    Swagger.validate_param("containerName", "blobContainersLease", :maxLength, containerName, 63)
    Swagger.validate_param("containerName", "blobContainersLease", :minLength, containerName, 3)

    Swagger.validate_param("api_version", "blobContainersLease", :minLength, api_version, 1)

    Swagger.validate_param("subscriptionId", "blobContainersLease", :minLength, subscriptionId, 1)

    _ctx = Swagger.Ctx(_api.client, "POST", LeaseContainerResponse, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/lease", ["azure_auth"], parameters)
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "accountName", accountName)  # type String
    Swagger.set_param(_ctx.path, "containerName", containerName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.
Param: resourceGroupName::String (required)
Param: accountName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Param: maxpagesize::String
Param: filter::String
Return: ListContainerItems
"""
function blobContainersList(_api::BlobContainersApi, resourceGroupName::String, accountName::String, api_version::String, subscriptionId::String; maxpagesize=nothing, filter=nothing, _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "blobContainersList", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "blobContainersList", :minLength, resourceGroupName, 1)

    Swagger.validate_param("accountName", "blobContainersList", :maxLength, accountName, 24)
    Swagger.validate_param("accountName", "blobContainersList", :minLength, accountName, 3)

    Swagger.validate_param("api_version", "blobContainersList", :minLength, api_version, 1)

    Swagger.validate_param("subscriptionId", "blobContainersList", :minLength, subscriptionId, 1)

    _ctx = Swagger.Ctx(_api.client, "GET", ListContainerItems, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "accountName", accountName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_param(_ctx.query, "\$maxpagesize", maxpagesize)  # type String
    Swagger.set_param(_ctx.query, "\$filter", filter)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Sets the ImmutabilityPolicy to Locked state. The only action allowed on a Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is required for this operation.
Param: resourceGroupName::String (required)
Param: accountName::String (required)
Param: containerName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Param: If_Match::String (required)
Return: ImmutabilityPolicy
"""
function blobContainersLockImmutabilityPolicy(_api::BlobContainersApi, resourceGroupName::String, accountName::String, containerName::String, api_version::String, subscriptionId::String, If_Match::String; _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "blobContainersLockImmutabilityPolicy", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "blobContainersLockImmutabilityPolicy", :minLength, resourceGroupName, 1)

    Swagger.validate_param("accountName", "blobContainersLockImmutabilityPolicy", :maxLength, accountName, 24)
    Swagger.validate_param("accountName", "blobContainersLockImmutabilityPolicy", :minLength, accountName, 3)

    Swagger.validate_param("containerName", "blobContainersLockImmutabilityPolicy", :maxLength, containerName, 63)
    Swagger.validate_param("containerName", "blobContainersLockImmutabilityPolicy", :minLength, containerName, 3)

    Swagger.validate_param("api_version", "blobContainersLockImmutabilityPolicy", :minLength, api_version, 1)

    Swagger.validate_param("subscriptionId", "blobContainersLockImmutabilityPolicy", :minLength, subscriptionId, 1)

    _ctx = Swagger.Ctx(_api.client, "POST", ImmutabilityPolicy, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/lock", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "accountName", accountName)  # type String
    Swagger.set_param(_ctx.path, "containerName", containerName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_param(_ctx.header, "If-Match", If_Match)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Sets legal hold tags. Setting the same tag results in an idempotent operation. SetLegalHold follows an append pattern and does not clear out the existing tags that are not specified in the request.
Param: resourceGroupName::String (required)
Param: accountName::String (required)
Param: containerName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Param: LegalHold::LegalHold (required)
Return: LegalHold
"""
function blobContainersSetLegalHold(_api::BlobContainersApi, resourceGroupName::String, accountName::String, containerName::String, api_version::String, subscriptionId::String, LegalHold; _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "blobContainersSetLegalHold", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "blobContainersSetLegalHold", :minLength, resourceGroupName, 1)

    Swagger.validate_param("accountName", "blobContainersSetLegalHold", :maxLength, accountName, 24)
    Swagger.validate_param("accountName", "blobContainersSetLegalHold", :minLength, accountName, 3)

    Swagger.validate_param("containerName", "blobContainersSetLegalHold", :maxLength, containerName, 63)
    Swagger.validate_param("containerName", "blobContainersSetLegalHold", :minLength, containerName, 3)

    Swagger.validate_param("api_version", "blobContainersSetLegalHold", :minLength, api_version, 1)

    Swagger.validate_param("subscriptionId", "blobContainersSetLegalHold", :minLength, subscriptionId, 1)

    _ctx = Swagger.Ctx(_api.client, "POST", LegalHold, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/setLegalHold", ["azure_auth"], LegalHold)
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "accountName", accountName)  # type String
    Swagger.set_param(_ctx.path, "containerName", containerName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""

Updates container properties as specified in request body. Properties not mentioned in the request will be unchanged. Update fails if the specified container doesn't already exist. 
Param: resourceGroupName::String (required)
Param: accountName::String (required)
Param: containerName::String (required)
Param: blobContainer::BlobContainer (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: BlobContainer
"""
function blobContainersUpdate(_api::BlobContainersApi, resourceGroupName::String, accountName::String, containerName::String, blobContainer, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "blobContainersUpdate", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "blobContainersUpdate", :minLength, resourceGroupName, 1)

    Swagger.validate_param("accountName", "blobContainersUpdate", :maxLength, accountName, 24)
    Swagger.validate_param("accountName", "blobContainersUpdate", :minLength, accountName, 3)

    Swagger.validate_param("containerName", "blobContainersUpdate", :maxLength, containerName, 63)
    Swagger.validate_param("containerName", "blobContainersUpdate", :minLength, containerName, 3)

    Swagger.validate_param("api_version", "blobContainersUpdate", :minLength, api_version, 1)

    Swagger.validate_param("subscriptionId", "blobContainersUpdate", :minLength, subscriptionId, 1)

    _ctx = Swagger.Ctx(_api.client, "PATCH", BlobContainer, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}", ["azure_auth"], blobContainer)
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "accountName", accountName)  # type String
    Swagger.set_param(_ctx.path, "containerName", containerName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    Swagger.exec(_ctx)
end

export blobContainersClearLegalHold, blobContainersCreate, blobContainersCreateOrUpdateImmutabilityPolicy, blobContainersDelete, blobContainersDeleteImmutabilityPolicy, blobContainersExtendImmutabilityPolicy, blobContainersGet, blobContainersGetImmutabilityPolicy, blobContainersLease, blobContainersList, blobContainersLockImmutabilityPolicy, blobContainersSetLegalHold, blobContainersUpdate
